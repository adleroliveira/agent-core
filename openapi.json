{
  "openapi": "3.0.0",
  "paths": {
    "/api/agents": {
      "post": {
        "description": "Creates a new agent with the specified configuration",
        "operationId": "AgentController_createAgent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The agent configuration including name, description, and system prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        },
        "summary": "Create a new agent",
        "tags": [
          "agents"
        ]
      },
      "get": {
        "description": "Retrieves a list of all available agents",
        "operationId": "AgentController_getAllAgents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of agents retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all agents",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}": {
      "get": {
        "description": "Retrieves detailed information about a specific agent",
        "operationId": "AgentController_getAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to retrieve",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully"
          },
          "404": {
            "description": "Agent not found"
          }
        },
        "summary": "Get agent by ID",
        "tags": [
          "agents"
        ]
      },
      "delete": {
        "description": "Deletes a specific agent by ID",
        "operationId": "AgentController_deleteAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to delete",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete an agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/message": {
      "post": {
        "description": "Send a message to an agent. The StateId is required to identify the conversation.",
        "operationId": "AgentController_sendMessage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stream",
            "required": false,
            "in": "query",
            "description": "Whether to stream the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The message to send, including stateId to identify the conversation and optional file attachments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Agent not found"
          }
        },
        "summary": "Send a message to an agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/prompt": {
      "put": {
        "description": "Updates the system prompt for a specific agent",
        "operationId": "AgentController_updateSystemPrompt",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new system prompt content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System prompt updated successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update system prompt",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/tools": {
      "post": {
        "description": "Adds a new tool to the agent's capabilities",
        "operationId": "AgentController_addTool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The tool to add to the agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToolDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool added successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Add tool to agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/tools/{toolId}": {
      "delete": {
        "description": "Removes a tool from the agent's capabilities",
        "operationId": "AgentController_removeTool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "The ID of the tool to remove",
            "schema": {
              "example": "tool_123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tool removed successfully"
          },
          "404": {
            "description": "Agent or tool not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Remove tool from agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/reset": {
      "post": {
        "description": "Resets the state of a specific agent",
        "operationId": "AgentController_resetState",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to reset",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent state reset successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Reset agent state",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/new-conversation": {
      "post": {
        "description": "Creates a new conversation for a specific agent",
        "operationId": "AgentController_createNewConversation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": false,
            "in": "query",
            "description": "Optional state ID to specify when creating a new conversation",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New conversation created successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create new conversation",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/conversations": {
      "get": {
        "description": "Retrieves all conversations for a specific agent",
        "operationId": "AgentController_getConversations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get agent conversations",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/conversations/{stateId}": {
      "delete": {
        "description": "Deletes a specific conversation for an agent",
        "operationId": "AgentController_deleteConversation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation to delete",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully"
          },
          "404": {
            "description": "Agent or conversation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete conversation",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/conversation-history": {
      "get": {
        "description": "Retrieves the conversation history for a specific agent and state",
        "operationId": "AgentController_getConversationHistory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "query",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of messages to retrieve",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "beforeTimestamp",
            "required": false,
            "in": "query",
            "description": "Retrieve messages before this timestamp",
            "schema": {
              "format": "date-time",
              "example": "2024-04-15T08:00:00.000Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessageDto"
                      }
                    },
                    "hasMore": {
                      "type": "boolean",
                      "description": "Whether there are more messages available",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent or state not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get conversation history",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/memory/{stateId}": {
      "get": {
        "description": "Retrieves the memory state for a specific agent and conversation state",
        "operationId": "AgentController_getMemory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "string",
                      "description": "The ID of the agent",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "stateId": {
                      "type": "string",
                      "description": "The ID of the conversation state",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "memory": {
                      "type": "object",
                      "description": "The memory state of the agent",
                      "additionalProperties": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent or state not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get agent memory",
        "tags": [
          "agents"
        ]
      },
      "put": {
        "description": "Sets the complete memory state for a specific agent and conversation state",
        "operationId": "AgentController_setMemory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "The complete memory state to set"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory set successfully"
          },
          "404": {
            "description": "Agent or state not found"
          }
        },
        "summary": "Set agent memory",
        "tags": [
          "agents"
        ]
      },
      "patch": {
        "description": "Updates the memory state by merging new values with existing ones",
        "operationId": "AgentController_updateMemory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "The memory updates to merge with existing memory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory updated successfully"
          },
          "404": {
            "description": "Agent or state not found"
          }
        },
        "summary": "Update agent memory",
        "tags": [
          "agents"
        ]
      },
      "delete": {
        "description": "Clears all memory for a specific agent and conversation state",
        "operationId": "AgentController_deleteMemory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory cleared successfully"
          },
          "404": {
            "description": "Agent or state not found"
          }
        },
        "summary": "Delete agent memory",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/agents/{id}/memory/{stateId}/{key}": {
      "delete": {
        "description": "Removes a specific key from the agent's memory",
        "operationId": "AgentController_deleteMemoryEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "path",
            "description": "The ID of the conversation state",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "The key to remove from memory",
            "schema": {
              "example": "last_user_query",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory entry deleted successfully"
          },
          "404": {
            "description": "Agent or state not found"
          }
        },
        "summary": "Delete memory entry",
        "tags": [
          "agents"
        ]
      }
    },
    "/api/tools": {
      "get": {
        "description": "Retrieves a list of all available tools that can be used by agents",
        "operationId": "ToolsController_getAllTools",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all available tools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToolDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all available tools",
        "tags": [
          "tools"
        ]
      }
    },
    "/api/tools/mcp": {
      "get": {
        "description": "Retrieves a list of all MCP tools",
        "operationId": "ToolsController_getMcpTools",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all MCP tools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToolDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all MCP tools",
        "tags": [
          "tools"
        ]
      }
    },
    "/api/models": {
      "get": {
        "operationId": "ModelsController_getAvailableModels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all available models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInfoDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching models"
          }
        },
        "summary": "Get all available models",
        "tags": [
          "Models"
        ]
      }
    },
    "/api/files/upload/{type}": {
      "post": {
        "operationId": "FileUploadController_uploadFiles",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file"
          }
        },
        "summary": "Upload files",
        "tags": [
          "Files"
        ]
      }
    }
  },
  "info": {
    "title": "Agent Core API",
    "description": "The Agent Core API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "agents",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateAgentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the agent",
            "example": "My Assistant"
          },
          "description": {
            "type": "string",
            "description": "A description of what the agent does",
            "example": "An AI assistant that helps with daily tasks"
          },
          "modelId": {
            "type": "string",
            "description": "The ID of the model to use for this agent",
            "example": "gpt-4"
          },
          "systemPrompt": {
            "type": "string",
            "description": "The system prompt that defines the agent's behavior",
            "example": "You are a helpful AI assistant..."
          },
          "tools": {
            "description": "List of tool IDs that the agent can use",
            "example": [
              "tool1",
              "tool2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "description",
          "systemPrompt"
        ]
      },
      "FileInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique file identifier"
          },
          "filename": {
            "type": "string",
            "description": "Generated filename"
          },
          "originalName": {
            "type": "string",
            "description": "Original filename"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes"
          },
          "mimetype": {
            "type": "string",
            "description": "File MIME type"
          }
        },
        "required": [
          "id",
          "filename",
          "originalName",
          "size",
          "mimetype"
        ]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the message to send",
            "example": "Hello, how can you help me today?"
          },
          "stateId": {
            "type": "string",
            "description": "Optional state ID to continue an existing conversation. If not provided, a new conversation will be created.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for response generation (0-1)",
            "minimum": 0,
            "maximum": 1,
            "default": 0.7
          },
          "maxTokens": {
            "type": "number",
            "description": "Maximum number of tokens to generate",
            "minimum": 1,
            "default": 2000
          },
          "files": {
            "description": "Array of files attached to the message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfoDto"
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "ToolCallDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call",
            "example": "call_123"
          },
          "name": {
            "type": "string",
            "description": "The name of the tool being called",
            "example": "search"
          },
          "arguments": {
            "type": "object",
            "description": "The arguments passed to the tool",
            "example": {
              "query": "weather in London"
            }
          }
        },
        "required": [
          "id",
          "name",
          "arguments"
        ]
      },
      "ToolResultDto": {
        "type": "object",
        "properties": {
          "isError": {
            "type": "boolean",
            "description": "Whether the tool call was successful",
            "example": false
          },
          "toolCallId": {
            "type": "string",
            "description": "The ID of the tool call",
            "example": "call_123"
          },
          "result": {
            "type": "string",
            "description": "The result of the tool call",
            "example": "The weather in London is sunny"
          }
        },
        "required": [
          "isError",
          "toolCallId",
          "result"
        ]
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the message",
            "example": "msg_123"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello, how can I help you?"
          },
          "role": {
            "type": "string",
            "description": "The role of the message sender",
            "enum": [
              "user",
              "assistant",
              "tool"
            ],
            "example": "assistant"
          },
          "stateId": {
            "type": "string",
            "description": "The ID of the conversation this message belongs to",
            "example": "conv_123"
          },
          "createdAt": {
            "type": "string",
            "description": "When the message was created",
            "example": "2024-03-14T12:00:00Z"
          },
          "toolCalls": {
            "description": "Tool calls made in this message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCallDto"
            }
          },
          "toolResults": {
            "description": "Results from tool calls",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolResultDto"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the message"
          },
          "files": {
            "description": "Files attached to the message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfoDto"
            }
          }
        },
        "required": [
          "id",
          "content",
          "role",
          "stateId",
          "createdAt"
        ]
      },
      "UpdatePromptDto": {
        "type": "object",
        "properties": {}
      },
      "AddToolDto": {
        "type": "object",
        "properties": {
          "toolName": {
            "type": "string",
            "description": "The name of the tool to add to the agent",
            "example": "search"
          }
        },
        "required": [
          "toolName"
        ]
      },
      "ConversationDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "The ID of the agent",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "stateId": {
            "type": "string",
            "description": "The ID of the conversation state",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "description": "When the conversation was created",
            "example": "2024-04-15T08:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When the conversation was last updated",
            "example": "2024-04-15T08:00:00.000Z"
          }
        },
        "required": [
          "agentId",
          "stateId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ToolDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the tool",
            "example": "tool_123"
          },
          "name": {
            "type": "string",
            "description": "The name of the tool",
            "example": "search"
          },
          "description": {
            "type": "string",
            "description": "A description of what the tool does",
            "example": "Searches for information using a search engine"
          },
          "parameters": {
            "type": "object",
            "description": "The parameters that the tool accepts",
            "example": {
              "query": {
                "type": "string",
                "description": "The search query",
                "required": true
              }
            }
          },
          "systemPrompt": {
            "type": "string",
            "description": "The system prompt that describes how to use the tool",
            "example": "Use this tool to search for information on the web"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "parameters"
        ]
      },
      "ModelPricingDto": {
        "type": "object",
        "properties": {
          "input": {
            "type": "number",
            "description": "Price per input token"
          },
          "output": {
            "type": "number",
            "description": "Price per output token"
          }
        }
      },
      "ModelInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the model"
          },
          "name": {
            "type": "string",
            "description": "Display name of the model"
          },
          "description": {
            "type": "string",
            "description": "Description of the model"
          },
          "capabilities": {
            "description": "List of model capabilities",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxTokens": {
            "type": "number",
            "description": "Maximum number of tokens the model can process"
          },
          "contextWindow": {
            "type": "number",
            "description": "Context window size in tokens"
          },
          "supportsStreaming": {
            "type": "boolean",
            "description": "Whether the model supports streaming responses"
          },
          "supportsToolCalls": {
            "type": "boolean",
            "description": "Whether the model supports tool calls"
          },
          "inputModalities": {
            "description": "Input modalities supported by the model",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputModalities": {
            "description": "Output modalities supported by the model",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing": {
            "description": "Pricing information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelPricingDto"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the model"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the model"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the model is active"
          }
        },
        "required": [
          "id",
          "name",
          "supportsStreaming",
          "supportsToolCalls",
          "inputModalities",
          "outputModalities"
        ]
      },
      "FileUploadResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique file identifier"
          },
          "filename": {
            "type": "string",
            "description": "Generated filename"
          },
          "originalName": {
            "type": "string",
            "description": "Original filename"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes"
          },
          "mimetype": {
            "type": "string",
            "description": "File MIME type"
          }
        },
        "required": [
          "id",
          "filename",
          "originalName",
          "size",
          "mimetype"
        ]
      }
    }
  }
}