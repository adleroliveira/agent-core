{
  "openapi": "3.0.0",
  "paths": {
    "/api/agents": {
      "post": {
        "operationId": "AgentController_createAgent",
        "summary": "Create a new agent",
        "description": "Creates a new agent with the specified configuration",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The agent configuration including name, description, and system prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      },
      "get": {
        "operationId": "AgentController_getAllAgents",
        "summary": "Get all agents",
        "description": "Retrieves a list of all available agents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of agents retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}": {
      "get": {
        "operationId": "AgentController_getAgent",
        "summary": "Get agent by ID",
        "description": "Retrieves detailed information about a specific agent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to retrieve",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      },
      "delete": {
        "operationId": "AgentController_deleteAgent",
        "summary": "Delete an agent",
        "description": "Deletes a specific agent by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to delete",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/message": {
      "post": {
        "operationId": "AgentController_sendMessage",
        "summary": "Send a message to an agent",
        "description": "Send a message to an agent. The StateId is required to identify the conversation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stream",
            "required": false,
            "in": "query",
            "description": "Whether to stream the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The message to send, including stateId to identify the conversation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/api/agents/{id}/prompt": {
      "put": {
        "operationId": "AgentController_updateSystemPrompt",
        "summary": "Update system prompt",
        "description": "Updates the system prompt for a specific agent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new system prompt content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System prompt updated successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/tools": {
      "post": {
        "operationId": "AgentController_addTool",
        "summary": "Add tool to agent",
        "description": "Adds a new tool to the agent's capabilities",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The tool to add to the agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToolDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool added successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/tools/{toolId}": {
      "delete": {
        "operationId": "AgentController_removeTool",
        "summary": "Remove tool from agent",
        "description": "Removes a tool from the agent's capabilities",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "The ID of the tool to remove",
            "schema": {
              "example": "tool_123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tool removed successfully"
          },
          "404": {
            "description": "Agent or tool not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/reset": {
      "post": {
        "operationId": "AgentController_resetState",
        "summary": "Reset agent state",
        "description": "Resets the state of a specific agent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to reset",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent state reset successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/new-conversation": {
      "post": {
        "operationId": "AgentController_createNewConversation",
        "summary": "Create new conversation",
        "description": "Creates a new conversation for a specific agent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": false,
            "in": "query",
            "description": "Optional state ID to specify when creating a new conversation",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New conversation created successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/conversations": {
      "get": {
        "operationId": "AgentController_getConversations",
        "summary": "Get agent conversations",
        "description": "Retrieves all conversations for a specific agent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/agents/{id}/conversation-history": {
      "get": {
        "operationId": "AgentController_getConversationHistory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "beforeTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/tools": {
      "get": {
        "operationId": "ToolsController_getAllTools",
        "summary": "Get all available tools",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all available tools"
          }
        }
      }
    },
    "/api/models": {
      "get": {
        "operationId": "ModelsController_getAvailableModels",
        "summary": "Get all available models",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all available models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInfoDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching models"
          }
        },
        "tags": [
          "Models"
        ]
      }
    }
  },
  "info": {
    "title": "Agent Core API",
    "description": "The Agent Core API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "agents",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateAgentDto": {
        "type": "object",
        "properties": {}
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the message to send",
            "example": "Hello, how can you help me today?"
          },
          "stateId": {
            "type": "string",
            "description": "Optional state ID to continue an existing conversation. If not provided, a new conversation will be created.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for response generation (0-1)",
            "minimum": 0,
            "maximum": 1,
            "default": 0.7
          },
          "maxTokens": {
            "type": "number",
            "description": "Maximum number of tokens to generate",
            "minimum": 1,
            "default": 1000
          }
        },
        "required": [
          "content"
        ]
      },
      "ToolCallDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call",
            "example": "call_123"
          },
          "name": {
            "type": "string",
            "description": "The name of the tool being called",
            "example": "search"
          },
          "arguments": {
            "type": "object",
            "description": "The arguments passed to the tool",
            "example": {
              "query": "weather in London"
            }
          }
        },
        "required": [
          "id",
          "name",
          "arguments"
        ]
      },
      "ToolResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool result",
            "example": "result_123"
          },
          "content": {
            "type": "string",
            "description": "The content of the tool result",
            "example": "The weather in London is sunny"
          }
        },
        "required": [
          "id",
          "content"
        ]
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the message",
            "example": "msg_123"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello, how can I help you?"
          },
          "role": {
            "type": "string",
            "description": "The role of the message sender",
            "enum": [
              "user",
              "assistant"
            ],
            "example": "assistant"
          },
          "stateId": {
            "type": "string",
            "description": "The ID of the conversation this message belongs to",
            "example": "conv_123"
          },
          "createdAt": {
            "type": "string",
            "description": "When the message was created",
            "example": "2024-03-14T12:00:00Z"
          },
          "toolCalls": {
            "description": "Tool calls made in this message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCallDto"
            }
          },
          "toolResults": {
            "description": "Results from tool calls",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolResultDto"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the message"
          }
        },
        "required": [
          "id",
          "content",
          "role",
          "stateId",
          "createdAt"
        ]
      },
      "UpdatePromptDto": {
        "type": "object",
        "properties": {}
      },
      "AddToolDto": {
        "type": "object",
        "properties": {}
      },
      "ModelPricingDto": {
        "type": "object",
        "properties": {
          "input": {
            "type": "number",
            "description": "Price per input token"
          },
          "output": {
            "type": "number",
            "description": "Price per output token"
          }
        }
      },
      "ModelInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the model"
          },
          "name": {
            "type": "string",
            "description": "Display name of the model"
          },
          "description": {
            "type": "string",
            "description": "Description of the model"
          },
          "capabilities": {
            "description": "List of model capabilities",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxTokens": {
            "type": "number",
            "description": "Maximum number of tokens the model can process"
          },
          "contextWindow": {
            "type": "number",
            "description": "Context window size in tokens"
          },
          "supportsStreaming": {
            "type": "boolean",
            "description": "Whether the model supports streaming responses"
          },
          "supportsToolCalls": {
            "type": "boolean",
            "description": "Whether the model supports tool calls"
          },
          "inputModalities": {
            "description": "Input modalities supported by the model",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputModalities": {
            "description": "Output modalities supported by the model",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing": {
            "description": "Pricing information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelPricingDto"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the model"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the model"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the model is active"
          }
        },
        "required": [
          "id",
          "name",
          "supportsStreaming",
          "supportsToolCalls",
          "inputModalities",
          "outputModalities"
        ]
      }
    }
  }
}